;; -*- mode: emacs-lisp, coding: utf-8 -*-

(setq skk-server-host "localhost")
(setq skk-server-portnum 1178)

(setq skk-use-viper t)
(viper-harness-minor-mode "skk-annotation")

(setq skk-auto-start-henkan nil)
(setq skk-henkan-strict-okuri-precedence t)
(setq skk-show-annotation t)

(defadvice skk-num-to-kanji (after type3-zero-to-rei)
  "#3 型数値変換で `0' を `〇' でなく `零' に変換する"
  (let ((type (ad-get-arg 1)))
    (when (and (eq type 'type3)
               (string-equal ad-return-value "〇"))
      (setq ad-return-value "零"))))

(when (require* 'seikana-ziom)
  (define-key skk-j-mode-map
    "\C-c\C-h" #'seikana-display-ziom-for-char-at-point))

(when (and (require* 'skk-kanagaki-util)
           (require* 'skk-pskana))
  (setq skk-kanagaki-dakuten-alist
        (append skk-kanagaki-dakuten-alist '(("ゝ" "ゞ")
                                             ("ヽ" "ヾ"))))

  (defconst my-skk-rom-kana-rule-list-us
    '(("\C-k" nil skk-toggle-kana)
      ("\C-l" nil skk-latin-mode)
      ("\C-u" nil skk-purge-from-jisyo)
      ("^" nil skk-abbrev-mode)
      ("&" nil skk-set-henkan-point-subr)
      ("%" nil skk-input-by-code-or-menu)
      ("!" nil "！")
      ("(" nil "（")
      (")" nil "）")
      ("d]" nil "」")
      ("d'" nil "ー")
      ("d." nil "？")
      ("\\" nil ("チ" . "ち"))       ; for kinesis ergonomic keyboard
      ("ds" nil ("ヮ" . "ゎ"))
      ("ki" nil ("ヰ" . "ゐ"))
      ("ko" nil ("ヱ" . "ゑ"))
      ("km" nil "々")
      ("kn" nil ("ヽ" . "ゝ"))
      ("d*" nil "×")
      ("d0" nil "○")
      ("dd'" nil "〜")
      ("dd*" nil "※")
      ("dd[" nil "『")
      ("dd]" nil "』")
      ("ddh" nil "←")
      ("ddj" nil "↓")
      ("ddk" nil "↑")
      ("ddl" nil "→")
      ("dd;" nil ";")
      ("dd:" nil ":")
      ("dd," nil "‥")
      ("dd." nil "…")
      ("dd/" nil "・")
      ("dd " nil "　")
      ))

  (defconst my-skk-rom-kana-rule-list-jis
    '(("\C-k" nil skk-toggle-kana)
      ("\C-l" nil skk-latin-mode)
      ("\C-u" nil skk-purge-from-jisyo)
      ("^" nil skk-abbrev-mode)
      ("&" nil skk-set-henkan-point-subr)
      ("%" nil skk-input-by-code-or-menu)
      ("!" nil "！")
      ("(" nil "（")
      (")" nil "）")
      ("d[" nil "」")
      ("d:" nil "ー")
      ("d." nil "？")
      ("ds" nil ("ヮ" . "ゎ"))
      ("ki" nil ("ヰ" . "ゐ"))
      ("ko" nil ("ヱ" . "ゑ"))
      ("km" nil "々")
      ("kn" nil ("ヽ" . "ゝ"))
      ("dd:" nil "〜")
      ("dd@" nil "『")
      ("dd[" nil "』")
      ("ddh" nil "←")
      ("ddj" nil "↓")
      ("ddk" nil "↑")
      ("ddl" nil "→")
      ("dd," nil "‥")
      ("dd." nil "…")
      ("dd/" nil "・")
      ("dd " nil "　")
      ))

  (defconst my-skk-rom-kana-rule-list-dvorak
    '(("\C-k" nil skk-toggle-kana)
      ("\C-l" nil skk-latin-mode)
      ("\C-u" nil skk-purge-from-jisyo)
      ("^" nil skk-abbrev-mode)
      ("&" nil skk-set-henkan-point-subr)
      ("%" nil skk-input-by-code-or-menu)
      ("!" nil "！")
      ("(" nil "（")
      (")" nil "）")
      ("d=" nil "」")
      ("d-" nil "ー")
      ("dv" nil "？")
      ("\\" nil ("チ" . "ち"))       ; for kinesis ergonomic keyboard
      ("eo" nil ("ヮ" . "ゎ"))
      ("tc" nil ("ヰ" . "ゐ"))
      ("tr" nil ("ヱ" . "ゑ"))
      ("tm" nil "々")
      ("tb" nil ("ヽ" . "ゝ"))
      ("e*" nil "×")
      ("e0" nil "○")
      ("dd-" nil "〜")
      ("ee*" nil "※")
      ("dd/" nil "『")
      ("dd=" nil "』")
      ("eeh" nil "←")
      ("ttj" nil "↓")
      ("ttk" nil "↑")
      ("eel" nil "→")
      ("tt;" nil ";")
      ("tt:" nil ":")
      ("tt," nil "‥")
      ("tt." nil "…")
      ("ee/" nil "・")
      ("ee " nil "　")
      ))

  (cl-case skk-pskana-keyboard-type
    ((us)
     (setq skk-rom-kana-rule-list my-skk-rom-kana-rule-list-us)
     (setq skk-downcase-alist
           (cons '(?\| . ?\\)
                 skk-downcase-alist))
     (setq skk-set-henkan-point-key
           (cons ?\| skk-set-henkan-point-key)))
    ((jis)
     (setq skk-rom-kana-rule-list my-skk-rom-kana-rule-list-jis))
   ))
