;; -*- mode: emacs-lisp -*-

(setq skk-server-host "localhost")
(setq skk-server-portnum 1178)

(setq skk-use-viper t)
(viper-harness-minor-mode "skk-annotation")

(setq skk-auto-start-henkan nil)
(setq skk-henkan-strict-okuri-precedence t)
(setq skk-show-annotation t)

(defadvice skk-num-to-kanji (after type3-zero-to-rei)
 "#3 ·¿¿ôÃÍÊÑ´¹¤Ç `0' ¤ò `¡»' ¤Ç¤Ê¤¯ `Îí' ¤ËÊÑ´¹¤¹¤ë"
 (let ((type (ad-get-arg 1)))
   (when (and (eq type 'type3)
              (string-equal ad-return-value "¡»"))
     (setq ad-return-value "Îí"))))

(when (require* 'seikana-ziom)
  (define-key skk-j-mode-map
    "\C-c\C-h" #'seikana-display-ziom-for-char-at-point))

(when (and (require* 'skk-kanagaki-util)
           (require* 'skk-pskana))
  (setq skk-kanagaki-dakuten-alist
        (append skk-kanagaki-dakuten-alist '(("¡µ" "¡¶")
                                             ("¡³" "¡´"))))

  (defconst my-skk-rom-kana-rule-list-qwerty
    '(("\C-k" nil skk-toggle-kana)
      ("\C-l" nil skk-latin-mode)
      ("\C-u" nil skk-purge-from-jisyo)
      ("^" nil skk-abbrev-mode)
      ("&" nil skk-set-henkan-point-subr)
      ("%" nil skk-input-by-code-or-menu)
      ("!" nil "¡ª")
      ("(" nil "¡Ê")
      (")" nil "¡Ë")
      ("d]" nil "¡×")
      ("d'" nil "¡¼")
      ("d." nil "¡©")
      ("\\" nil ("¥Á" . "¤Á"))       ; for kinesis ergonomic keyboard
      ("ds" nil ("¥î" . "¤î"))
      ("ki" nil ("¥ð" . "¤ð"))
      ("ko" nil ("¥ñ" . "¤ñ"))
      ("km" nil "¡¹")
      ("kn" nil ("¡³" . "¡µ"))
      ("d*" nil "¡ß")
      ("d0" nil "¡û")
      ("dd'" nil "¡Á")
      ("dd*" nil "¢¨")
      ("dd[" nil "¡Ø")
      ("dd]" nil "¡Ù")
      ("ddh" nil "¢«")
      ("ddj" nil "¢­")
      ("ddk" nil "¢¬")
      ("ddl" nil "¢ª")
      ("dd;" nil ";")
      ("dd:" nil ":")
      ("dd," nil "¡Å")
      ("dd." nil "¡Ä")
      ("dd/" nil "¡¦")
      ("dd " nil "¡¡")
      ))

  (defconst my-skk-rom-kana-rule-list-dvorak
    '(("\C-k" nil skk-toggle-kana)
      ("\C-l" nil skk-latin-mode)
      ("\C-u" nil skk-purge-from-jisyo)
      ("^" nil skk-abbrev-mode)
      ("&" nil skk-set-henkan-point-subr)
      ("%" nil skk-input-by-code-or-menu)
      ("!" nil "¡ª")
      ("(" nil "¡Ê")
      (")" nil "¡Ë")
      ("d=" nil "¡×")
      ("d-" nil "¡¼")
      ("dv" nil "¡©")
      ("\\" nil ("¥Á" . "¤Á"))       ; for kinesis ergonomic keyboard
      ("eo" nil ("¥î" . "¤î"))
      ("tc" nil ("¥ð" . "¤ð"))
      ("tr" nil ("¥ñ" . "¤ñ"))
      ("tm" nil "¡¹")
      ("tb" nil ("¡³" . "¡µ"))
      ("e*" nil "¡ß")
      ("e0" nil "¡û")
      ("dd-" nil "¡Á")
      ("ee*" nil "¢¨")
      ("dd/" nil "¡Ø")
      ("dd=" nil "¡Ù")
      ("eeh" nil "¢«")
      ("ttj" nil "¢­")
      ("ttk" nil "¢¬")
      ("eel" nil "¢ª")
      ("tt;" nil ";")
      ("tt:" nil ":")
      ("tt," nil "¡Å")
      ("tt." nil "¡Ä")
      ("ee/" nil "¡¦")
      ("ee " nil "¡¡")
      ))

  (setq skk-rom-kana-rule-list my-skk-rom-kana-rule-list-qwerty)

  (setq skk-downcase-alist
        (cons '(?\| . ?\\)
              skk-downcase-alist))

  (setq skk-set-henkan-point-key
        (cons ?\| skk-set-henkan-point-key))
  )
